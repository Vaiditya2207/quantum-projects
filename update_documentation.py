#!/usr/bin/env python3 """ Script to update all documentation by: 1. Removing emojis and making text professional 2. Updating package name from quantumsim to quantumsim 3. Adding GitHub links with correct username """ import os import re import subprocess from pathlib import Path def clean_emojis_and_text(text): """Remove emojis and make text more professional""" # Common emoji patterns and their replacements emoji_replacements = { # Header/title emojis '': '', 'SPARKLE: ': '', 'STAR: ': '', 'TARGET: ': 'TARGET:', 'SCIENCE: ': 'SCIENCE:', 'EXPERIMENT: ': 'EXPERIMENT:', 'ADVANCED: ': 'ADVANCED:', 'LIGHTNING: ': 'PERFORMANCE:', 'SECURITY: ': 'SECURITY:', 'WAVE: ': 'WAVE:', 'LINK: ': 'LINK:', 'DEMO: ': 'DEMO:', 'AI: ': 'AI:', 'SUCCESS: ': 'SUCCESS:', 'DOCS: ': 'DOCS:', 'INTERACTIVE: ': 'INTERACTIVE:', 'LAPTOP: ': 'TECH:', 'CONFIG: ': 'CONFIG:', 'WEB: ': 'WEB:', 'BELL: ': 'BELL:', 'RANDOM: ': 'RANDOM:', 'CYCLE: ': 'CYCLE:', 'SIGNAL: ': 'SIGNAL:', 'MOLECULAR: ': 'MOLECULAR:', 'STATS: ': 'STATS:', 'COMPUTE: ': 'COMPUTE:', 'SHINE: ': '', 'VISUAL: ': 'VISUAL:', 'GROWTH: ': 'GROWTH:', 'INDUSTRY: ': 'INDUSTRY:', 'EDUCATION: ': 'EDUCATION:', '‍EDUCATION: ': 'EDUCATOR:', '‍LAPTOP: ': 'DEVELOPER:', 'STUDENT: ': 'STUDENT:', 'MANUAL: ': 'MANUAL:', 'FIRE: ': 'HOT:', 'RAINBOW: ': 'SPECTRUM:', 'CIRCUS: ': 'CIRCUS:', 'BULB: ': 'IDEA:', 'WIP: ': 'WIP:', 'WARNING: ': 'WARNING:', 'ERROR: ': 'ERROR:', 'SUCCESS: ': 'SUCCESS:', '-> ': '->', 'CONTROL: ': 'CONTROL:', 'MIC: ': 'MIC:', 'GUITAR: ': 'MUSIC:', 'FIRST: ': 'FIRST:', 'AWARD: ': 'AWARD:', 'SEARCH: ': 'SEARCH:', 'PACKAGE: ': 'PACKAGE:', 'FILES: ': 'FILES:', 'FOLDER: ': 'FOLDER:', 'NOTES: ': 'NOTES:', 'CLIPBOARD: ': 'CLIPBOARD:', 'GLOBAL: ': 'GLOBAL:', 'MAP: ': 'MAP:', 'COMPASS: ': 'COMPASS:', 'TARGET: ': 'TARGET:', 'KEY: ': 'KEY:', 'LOCK: ': 'LOCK:', 'UNLOCK: ': 'UNLOCK:', 'GUITAR: ': 'GUITAR:', 'TRUMPET: ': 'TRUMPET:', 'DRUMS: ': 'DRUMS:', 'PIANO: ': 'PIANO:', 'VIOLIN: ': 'VIOLIN:', 'RADIO: ': 'RADIO:', 'TV: ': 'TV:', 'MOBILE: ': 'MOBILE:', 'LAPTOP: ': 'LAPTOP:', 'DESKTOP: ': 'DESKTOP:', 'KEYBOARD: ': 'KEYBOARD:', 'MOUSE: ': 'MOUSE:', 'PRINTER: ': 'PRINTER:', 'CAMERA: ': 'CAMERA:', 'VIDEO: ': 'VIDEO:', 'FILM: ': 'FILM:', 'PROJECTOR: ': 'PROJECTOR:', 'FLASHLIGHT: ': 'FLASHLIGHT:', 'BULB: ': 'BULB:', 'CANDLE: ': 'CANDLE:', 'LAMP: ': 'LAMP:', 'FIRE: ': 'FIRE:', 'WATER: ': 'WATER:', 'SNOW: ': 'SNOW:', 'LIGHTNING: ': 'LIGHTNING:', 'SUN: ': 'SUN:', 'MOON: ': 'MOON:', 'STAR: ': 'STAR:', 'SPARKLE: ': 'SPARKLE:', 'DIZZY: ': 'DIZZY:', 'SHINE: ': 'SHINE:', 'RAINBOW: ': 'RAINBOW:', 'CLOUD: ': 'CLOUD:', 'PARTLY_CLOUDY: ': 'PARTLY_CLOUDY:', 'SUN_CLOUD: ': 'SUN_CLOUD:', 'RAIN_SUN: ': 'RAIN_SUN:', 'RAIN: ': 'RAIN:', 'STORM: ': 'STORM:', 'LIGHTNING: ': 'LIGHTNING:', 'SNOW: ': 'SNOW:', 'SNOWMAN: ': 'SNOWMAN:', 'SNOWMAN2: ': 'SNOWMAN2:', } # Remove emojis systematically result = text for emoji, replacement in emoji_replacements.items(): if replacement: result = result.replace(emoji, replacement + ' ') else: result = result.replace(emoji, '') # Remove any remaining emojis (Unicode ranges for emojis) emoji_pattern = re.compile( "[" "\U0001F1E0-\U0001F1FF" # flags (iOS) "\U0001F300-\U0001F5FF" # symbols & pictographs "\U0001F600-\U0001F64F" # emoticons "\U0001F680-\U0001F6FF" # transport & map symbols "\U0001F700-\U0001F77F" # alchemical symbols "\U0001F780-\U0001F7FF" # Geometric Shapes Extended "\U0001F800-\U0001F8FF" # Supplemental Arrows-C "\U0001F900-\U0001F9FF" # Supplemental Symbols and Pictographs "\U0001FA00-\U0001FA6F" # Chess Symbols "\U0001FA70-\U0001FAFF" # Symbols and Pictographs Extended-A "\U00002702-\U000027B0" # Dingbats "\U000024C2-\U0001F251" "]+" ) result = emoji_pattern.sub('', result) # Clean up extra spaces result = re.sub(r'\s+', ' ', result) result = re.sub(r'^\s+|\s+$', '', result, flags=re.MULTILINE) return result def update_package_names(text): """Update package names from quantumsim to quantumsim""" # Update import statements text = re.sub(r'\bfrom quantumsim\b', 'from quantumsim', text) text = re.sub(r'\bimport quantumsim\b', 'import quantumsim', text) text = re.sub(r'\bqsim\.', 'quantumsim.', text) # Update package references in text text = re.sub(r'\bqsim\b(?!\w)', 'quantumsim', text) text = re.sub(r'\bQSIM\b', 'QUANTUMSIM', text) return text def add_github_links(text): """Add proper GitHub links with username Vaiditya2207""" # Replace placeholder usernames text = re.sub(r'Vaiditya2207', 'Vaiditya2207', text) text = re.sub(r'https://github.com/Vaiditya2207/quantum-projects', 'https://github.com/Vaiditya2207/quantum-projects', text) text = re.sub(r'Vaiditya2207', 'Vaiditya2207', text) return text def make_professional_tone(text): """Make text more professional and less casual""" # Remove excessive exclamation marks text = re.sub(r'!{2,}', '!', text) # Update casual phrases casual_replacements = { "Let's explore this in detail.": "Let's explore this in detail.", "Let's get started.": "Let's get started.", "Now we can explore": "Now we can explore", "Important note:": "Important note:", "Continue exploring.": "Continue exploring.", "You can experiment": "You can experiment", "Continue working": "Continue working", "We will discover": "We will discover", } for casual, professional in casual_replacements.items(): text = text.replace(casual, professional) return text def process_file(file_path): """Process a single file to remove emojis and update content""" try: with open(file_path, 'r', encoding='utf-8') as f: content = f.read() # Apply all transformations content = clean_emojis_and_text(content) content = update_package_names(content) content = add_github_links(content) content = make_professional_tone(content) # Write back to file with open(file_path, 'w', encoding='utf-8') as f: f.write(content) print(f"Updated: {file_path}") return True except Exception as e: print(f"Error processing {file_path}: {e}") return False def main(): """Main function to process all files""" project_root = Path("/Users/vaidityatanwar/Desktop/project/quantum-projects") # File patterns to process patterns = ['**/*.py', '**/*.md', '**/*.sh', '**/*.yml', '**/*.txt', '**/*.ipynb'] # Collect all files files_to_process = [] for pattern in patterns: files_to_process.extend(project_root.glob(pattern)) # Remove duplicates and filter files_to_process = list(set(files_to_process)) # Skip certain files skip_patterns = ['.venv', '__pycache__', '.git', 'node_modules'] files_to_process = [f for f in files_to_process if not any(skip in str(f) for skip in skip_patterns)] print(f"Processing {len(files_to_process)} files...") success_count = 0 for file_path in files_to_process: if process_file(file_path): success_count += 1 print(f"Successfully processed {success_count}/{len(files_to_process)} files") if __name__ == '__main__': main()